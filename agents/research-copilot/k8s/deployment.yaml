apiVersion: apps/v1
kind: Deployment
metadata:
  name: research-copilot
  namespace: research-copilot
  labels:
    app: research-copilot
    component: agent
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: research-copilot
      component: agent
  template:
    metadata:
      labels:
        app: research-copilot
        component: agent
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: research-copilot
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: research-agent
        image: localhost:5000/research-copilot:latest
        imagePullPolicy: Always
        ports:
        - name: metrics
          containerPort: 8080
          protocol: TCP
        - name: health
          containerPort: 8081
          protocol: TCP
        env:
        # LLM Configuration
        - name: LLM_URL
          valueFrom:
            configMapKeyRef:
              name: research-copilot-config
              key: LLM_URL
        - name: LLM_MODEL
          valueFrom:
            configMapKeyRef:
              name: research-copilot-config
              key: LLM_MODEL
        # Application Configuration
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: research-copilot-config
              key: LOG_LEVEL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: research-copilot-config
              key: ENVIRONMENT
        - name: CONFIG_DIR
          valueFrom:
            configMapKeyRef:
              name: research-copilot-config
              key: CONFIG_DIR
        # Kubernetes Configuration
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        # API Credentials from Secrets
        - name: NOTION_TOKEN
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: notion-token
        - name: NOTION_DATABASE_ID
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: notion-database-id
        - name: SERPAPI_KEY
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: serpapi-key
              optional: true
        - name: BING_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: bing-api-key
              optional: true
        - name: BING_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: api-credentials
              key: bing-endpoint
              optional: true
        # Additional environment variables
        envFrom:
        - configMapRef:
            name: research-copilot-config
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import asyncio
              import os
              import sys
              sys.path.append('/app')
              from src.agent.main import ResearchCopilotAgent
              
              async def health_check():
                  agent = ResearchCopilotAgent()
                  configs = await agent.list_available_configurations()
                  return len(configs) > 0
              
              try:
                  result = asyncio.run(health_check())
                  exit(0 if result else 1)
              except Exception:
                  exit(1)
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - |
              import asyncio
              import os
              import sys
              sys.path.append('/app')
              from src.agent.main import ResearchCopilotAgent
              
              async def ready_check():
                  agent = ResearchCopilotAgent()
                  configs = await agent.list_available_configurations()
                  return len(configs) > 0
              
              try:
                  result = asyncio.run(ready_check())
                  exit(0 if result else 1)
              except Exception:
                  exit(1)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config-templates
          mountPath: /app/config/templates
          readOnly: true
      volumes:
      - name: config-templates
        projected:
          sources:
          - configMap:
              name: tech-research-template
          - configMap:
              name: market-research-template
          - configMap:
              name: llm-research-template
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst