[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agents"
version = "0.1.0"
description = "Multi-agent system for automated tasks on Raspberry Pi 5"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Agent Developer", email = "dev@example.com"},
]
keywords = ["agents", "automation", "llm", "kubernetes", "raspberry-pi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic>=2.0.0",
    "aiohttp>=3.8.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "kubernetes>=27.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.12.1",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.2",
    "pre-commit>=3.6.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/username/agents"
Repository = "https://github.com/username/agents"
Documentation = "https://agents.readthedocs.io"
"Bug Tracker" = "https://github.com/username/agents/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["shared*", "agents*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agents", "shared"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "kubernetes.*",
    "notion_client.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = [
    "tests",
    "agents/*/tests",
    "shared/tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "e2e: End-to-end tests",
    "slow: Slow-running tests",
    "performance: Performance tests",
    "requires_k8s: Tests requiring Kubernetes cluster",
    "requires_llm: Tests requiring LLM server",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["agents", "shared"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "*/tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process for tests

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]
